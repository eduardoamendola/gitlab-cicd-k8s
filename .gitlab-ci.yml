variables:
  IMAGE_NAME: eduardoamendola/python-demo-app
  IMAGE_TAG: python-app-2.0
  KUBE_CONTEXT: eduardo_amendola/simple-cicd:$KUBE_AGENT
  KUBE_AGENT: local-kind-cluster
  KUBE_NAMESPACE: default

stages:
  - test
  - build
  - deploy

run_tests:
  stage: test
  image: python:3.9-slim-bullseye
  before_script:
    - apt-get update && apt-get install make git -y
  script:
    - make test

# Docker Hub Registry
# build_image:
#   stage: build
#   image: docker:25.0.0
#   services:
#     - docker:25.0.0-dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   before_script:
#     - echo $DOCKERHUB_REGISTRY_PASS | docker login -u $DOCKERHUB_REGISTRY_USER --password-stdin
#   script:
#     - docker build -t $IMAGE_NAME:$IMAGE_TAG .
#     - docker push $IMAGE_NAME:$IMAGE_TAG

# GitLab Registry
build_image:
  stage: build
  image: docker:25.0.0
  services:
    - docker:25.0.0-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apt-get update && apt-get install git -y
    - echo $GITLAB_REGISTRY_PASS | docker login registry.gitlab.com -u $GITLAB_REGISTRY_USER --password-stdin
  script:
    - docker build -t registry.gitlab.com/$GITLAB_OWNER/$GITLAB_PROJECT .
    - docker push registry.gitlab.com/$GITLAB_OWNER/$GITLAB_PROJECT
    
deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config use-context $KUBE_CONTEXT
    - kubectl get nodes -o wide
    - kubectl apply -f k8s/secret.yaml
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
    - kubectl get pods
    # Now run the following command in your local implementation and access http://localhost:5000/ on your browser: kubectl port-forward svc/python-demo-service 5000:5000 

